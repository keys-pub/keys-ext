// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fido2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Devices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	DeviceInfo(ctx context.Context, in *DeviceInfoRequest, opts ...grpc.CallOption) (*DeviceInfoResponse, error)
	MakeCredential(ctx context.Context, in *MakeCredentialRequest, opts ...grpc.CallOption) (*MakeCredentialResponse, error)
	SetPIN(ctx context.Context, in *SetPINRequest, opts ...grpc.CallOption) (*SetPINResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	RetryCount(ctx context.Context, in *RetryCountRequest, opts ...grpc.CallOption) (*RetryCountResponse, error)
	Assertion(ctx context.Context, in *AssertionRequest, opts ...grpc.CallOption) (*AssertionResponse, error)
	CredentialsInfo(ctx context.Context, in *CredentialsInfoRequest, opts ...grpc.CallOption) (*CredentialsInfoResponse, error)
	Credentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
	RelyingParties(ctx context.Context, in *RelyingPartiesRequest, opts ...grpc.CallOption) (*RelyingPartiesResponse, error)
	GenerateHMACSecret(ctx context.Context, in *GenerateHMACSecretRequest, opts ...grpc.CallOption) (*GenerateHMACSecretResponse, error)
	HMACSecret(ctx context.Context, in *HMACSecretRequest, opts ...grpc.CallOption) (*HMACSecretResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Devices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := c.cc.Invoke(ctx, "/Auth/Devices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeviceInfo(ctx context.Context, in *DeviceInfoRequest, opts ...grpc.CallOption) (*DeviceInfoResponse, error) {
	out := new(DeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/Auth/DeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) MakeCredential(ctx context.Context, in *MakeCredentialRequest, opts ...grpc.CallOption) (*MakeCredentialResponse, error) {
	out := new(MakeCredentialResponse)
	err := c.cc.Invoke(ctx, "/Auth/MakeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetPIN(ctx context.Context, in *SetPINRequest, opts ...grpc.CallOption) (*SetPINResponse, error) {
	out := new(SetPINResponse)
	err := c.cc.Invoke(ctx, "/Auth/SetPIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/Auth/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RetryCount(ctx context.Context, in *RetryCountRequest, opts ...grpc.CallOption) (*RetryCountResponse, error) {
	out := new(RetryCountResponse)
	err := c.cc.Invoke(ctx, "/Auth/RetryCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Assertion(ctx context.Context, in *AssertionRequest, opts ...grpc.CallOption) (*AssertionResponse, error) {
	out := new(AssertionResponse)
	err := c.cc.Invoke(ctx, "/Auth/Assertion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CredentialsInfo(ctx context.Context, in *CredentialsInfoRequest, opts ...grpc.CallOption) (*CredentialsInfoResponse, error) {
	out := new(CredentialsInfoResponse)
	err := c.cc.Invoke(ctx, "/Auth/CredentialsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Credentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	out := new(CredentialsResponse)
	err := c.cc.Invoke(ctx, "/Auth/Credentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RelyingParties(ctx context.Context, in *RelyingPartiesRequest, opts ...grpc.CallOption) (*RelyingPartiesResponse, error) {
	out := new(RelyingPartiesResponse)
	err := c.cc.Invoke(ctx, "/Auth/RelyingParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GenerateHMACSecret(ctx context.Context, in *GenerateHMACSecretRequest, opts ...grpc.CallOption) (*GenerateHMACSecretResponse, error) {
	out := new(GenerateHMACSecretResponse)
	err := c.cc.Invoke(ctx, "/Auth/GenerateHMACSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) HMACSecret(ctx context.Context, in *HMACSecretRequest, opts ...grpc.CallOption) (*HMACSecretResponse, error) {
	out := new(HMACSecretResponse)
	err := c.cc.Invoke(ctx, "/Auth/HMACSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Devices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	DeviceInfo(context.Context, *DeviceInfoRequest) (*DeviceInfoResponse, error)
	MakeCredential(context.Context, *MakeCredentialRequest) (*MakeCredentialResponse, error)
	SetPIN(context.Context, *SetPINRequest) (*SetPINResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	RetryCount(context.Context, *RetryCountRequest) (*RetryCountResponse, error)
	Assertion(context.Context, *AssertionRequest) (*AssertionResponse, error)
	CredentialsInfo(context.Context, *CredentialsInfoRequest) (*CredentialsInfoResponse, error)
	Credentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error)
	RelyingParties(context.Context, *RelyingPartiesRequest) (*RelyingPartiesResponse, error)
	GenerateHMACSecret(context.Context, *GenerateHMACSecretRequest) (*GenerateHMACSecretResponse, error)
	HMACSecret(context.Context, *HMACSecretRequest) (*HMACSecretResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) Devices(context.Context, *DevicesRequest) (*DevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Devices not implemented")
}
func (*UnimplementedAuthServer) DeviceInfo(context.Context, *DeviceInfoRequest) (*DeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfo not implemented")
}
func (*UnimplementedAuthServer) MakeCredential(context.Context, *MakeCredentialRequest) (*MakeCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCredential not implemented")
}
func (*UnimplementedAuthServer) SetPIN(context.Context, *SetPINRequest) (*SetPINResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIN not implemented")
}
func (*UnimplementedAuthServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedAuthServer) RetryCount(context.Context, *RetryCountRequest) (*RetryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryCount not implemented")
}
func (*UnimplementedAuthServer) Assertion(context.Context, *AssertionRequest) (*AssertionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assertion not implemented")
}
func (*UnimplementedAuthServer) CredentialsInfo(context.Context, *CredentialsInfoRequest) (*CredentialsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialsInfo not implemented")
}
func (*UnimplementedAuthServer) Credentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credentials not implemented")
}
func (*UnimplementedAuthServer) RelyingParties(context.Context, *RelyingPartiesRequest) (*RelyingPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelyingParties not implemented")
}
func (*UnimplementedAuthServer) GenerateHMACSecret(context.Context, *GenerateHMACSecretRequest) (*GenerateHMACSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHMACSecret not implemented")
}
func (*UnimplementedAuthServer) HMACSecret(context.Context, *HMACSecretRequest) (*HMACSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HMACSecret not implemented")
}
func (*UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Devices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/DeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeviceInfo(ctx, req.(*DeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_MakeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).MakeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/MakeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).MakeCredential(ctx, req.(*MakeCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetPIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPINRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetPIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/SetPIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetPIN(ctx, req.(*SetPINRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RetryCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RetryCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/RetryCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RetryCount(ctx, req.(*RetryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Assertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Assertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Assertion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Assertion(ctx, req.(*AssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CredentialsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CredentialsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CredentialsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CredentialsInfo(ctx, req.(*CredentialsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Credentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Credentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Credentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Credentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RelyingParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelyingPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RelyingParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/RelyingParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RelyingParties(ctx, req.(*RelyingPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GenerateHMACSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateHMACSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GenerateHMACSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GenerateHMACSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GenerateHMACSecret(ctx, req.(*GenerateHMACSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_HMACSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HMACSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).HMACSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/HMACSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).HMACSecret(ctx, req.(*HMACSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Devices",
			Handler:    _Auth_Devices_Handler,
		},
		{
			MethodName: "DeviceInfo",
			Handler:    _Auth_DeviceInfo_Handler,
		},
		{
			MethodName: "MakeCredential",
			Handler:    _Auth_MakeCredential_Handler,
		},
		{
			MethodName: "SetPIN",
			Handler:    _Auth_SetPIN_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Auth_Reset_Handler,
		},
		{
			MethodName: "RetryCount",
			Handler:    _Auth_RetryCount_Handler,
		},
		{
			MethodName: "Assertion",
			Handler:    _Auth_Assertion_Handler,
		},
		{
			MethodName: "CredentialsInfo",
			Handler:    _Auth_CredentialsInfo_Handler,
		},
		{
			MethodName: "Credentials",
			Handler:    _Auth_Credentials_Handler,
		},
		{
			MethodName: "RelyingParties",
			Handler:    _Auth_RelyingParties_Handler,
		},
		{
			MethodName: "GenerateHMACSecret",
			Handler:    _Auth_GenerateHMACSecret_Handler,
		},
		{
			MethodName: "HMACSecret",
			Handler:    _Auth_HMACSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fido2.proto",
}
