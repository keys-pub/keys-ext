on: [push]
name: Test
jobs:
  security:
    name: Review security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install gosec
        uses: "cedrickring/golang-action@1.4.1"
        with:
          args: go get github.com/securego/gosec/cmd/gosec; (cd db && gosec .) && (cd firestore && gosec .) && (cd http/api && gosec .) && (cd http/client && gosec .) && (cd http/server && gosec .) && (cd service && gosec .) && (cd wormhole && gosec .)
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt install software-properties-common
          sudo apt-add-repository ppa:yubico/stable
          sudo apt update
          sudo apt install libfido2-dev
      - name: Install dependencies (macos)
        if: matrix.os == 'macos-latest'
        run: brew install libfido2
      - name: Install dependencies (windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop bucket add keys.pub https://github.com/keys-pub/scoop-bucket
          scoop install libfido2
          echo "::add-path::$HOME/scoop/apps/libfido2/current"
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13.x
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Test (db)
        run: cd db; go test -v ./...
      - name: Test (http/api)
        run: cd http/api; go test -v ./...
      - name: Test (http/client)
        run: cd http/client; go test -v ./...
      - name: Test (http/server)
        run: cd http/server; go test -v ./...
      - name: Test (service)
        run: cd service; go test -v ./...
      - name: Test (wormhole)
        if: matrix.os == 'ubuntu-latest'
        run: cd wormhole; go test -v ./...
